package com.shinhan.firstzone;

import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.shinhan.firstzone.repository3.FreeBoardRepository;
import com.shinhan.firstzone.repository3.FreeReplyRepository;
import com.shinhan.firstzone.vo3.FreeBoardEntity;
import com.shinhan.firstzone.vo3.FreeReplyEntity;

import jakarta.transaction.Transactional;

@SpringBootTest
public class BiDirectionTest {
	
	@Autowired
	FreeBoardRepository boardRepo;
	@Autowired
	FreeReplyRepository replyRepo;
	
	//조건 조회 bno>=10 and bno<=20, paging추가, sort추가
	@Test
	void select111() {
		Pageable pageable = PageRequest.of(0, 5, Sort.Direction.DESC )
		boardRepo.findByBnoBetween(10L, 20L, pageable).forEach(board->{
			System.out.println(board);
		});
		
	}
	//BoardTitle, Reply 건수
	//@Test
	void selectBoardReply() {
		boardRepo.getBoardReplyCount2().forEach(arr -> {
			System.out.println(Arrays.toString(arr));
		});;
	}
	
//	@Transactional 
//	@Test
	void selectBoard() {
		boardRepo.findAll().forEach(board->{
			System.out.println(board);
			System.out.println("댓글건수" + board.getReplies().size());
		});
	}
	
	//조회(Board번호를 알고 댓글들의 정보조회)
	//@Transactional //board의 fetch타입이 LAZY이고, toString에서 exclude되어있기 때문에 선언해줌.
	//@Test
	void selectByReply() {
		//보드 번호 5의 댓글 조회
		FreeBoardEntity board = FreeBoardEntity.builder().bno(5L).build();
		replyRepo.findByBoard(board).forEach(reply->{
			System.out.println(reply);
			System.out.println(reply.getBoard());
		});
	}
	
	//댓글수정
	@Test
	void updateReply() {
		//board_bno가 null인 것
		FreeBoardEntity board = FreeBoardEntity.builder().bno(30L).build();
		//Long[] arr = {14L, 15L, 16L};
		//List<Long> idList = Arrays.asList(arr);
		//여러개 bno받기
		replyRepo.findAllById(Arrays.asList(14L, 15L, 16L)).forEach(reply->{
			reply.setBoard(board);
			//replyRepo.save(null);
			replyRepo.save(reply);
		});
		 
	}
	
	//댓글 삽입
	//@Test
	void insertReply() {
//		FreeBoardEntity board = boardRepo.findById(4L).get(); //bno=4번 가져옴
		FreeBoardEntity board = FreeBoardEntity.builder().bno(4L).build();
		FreeReplyEntity reply = FreeReplyEntity.builder()
				.reply("점심메뉴")
				.replyer("user1")
				.board(board) 
				.build();
		replyRepo.save(reply);
	}
	
	//특정 board의 댓글 삽입
	//@Test
	void insertBoard2() {
		//bno=1이 있다면
		 boardRepo.findById(3L).ifPresent(board->{
			List<FreeReplyEntity> replyList = board.getReplies();
			//댓글 삽입
			IntStream.rangeClosed(1, 3).forEach(i->{
				FreeReplyEntity reply = FreeReplyEntity.builder()
						.reply("맛집~~" + i)
						.replyer("user" + i%2)
						.board(board) //부모를 참조한다.
						.build();
				replyList.add(reply);
			});
			boardRepo.save(board);
		 });
	}
	
	//@Test
	void insertBoard() {
		//30건
		IntStream.rangeClosed(1, 30).forEach(i->{ //댓글 제외 보드 생성
			FreeBoardEntity entity = FreeBoardEntity.builder()
									.title("수요일"+i)
									.content("오늘 날씨는" + (i%2==0? "맑음":"비"))
									.writer("user" + i%5)
									.build();
			boardRepo.save(entity);
		});
	}
}
